input {
  # Read all documents from Arachne Elasticsearch matching the given query
  elasticsearch {
    hosts => "localhost:9201"
    index => "arachne4"
    query => '{ "query": { "match": { "facet_materialbeschreibung": "weiÃŸer Marmor"} } }'
#    query => '{ "query": { "match": { "facet_subkategorie_objekt": "Plastik"} } }'
    size => "20"
  }
}

filter{
  # Add @context for json-ld
  mutate {add_field => {"@context" => "http://localhost:9200/object/context/1/_source"}}
  # dc mapping for identifier
  mutate {
    replace => { "type" => "arachne" }
    rename => { "title" => "dcterms:title" }
    rename => { "entityId" => "dcterms:identifier" }
    }

  # Mapping for nested location attributes to dc
  # create location only for the archaeological site, where the object was found
  if [places] {
  ruby {
      code => '
        place = event.get("[places]")
        array = Array.new
        i = 0

        place.each do |pl|
          if pl["relation"] == "Fundort"
            event.set("location", pl["location"])
          end
          array[i] = {}
          unless pl["location"]["lat"].nil?
            array[i]["wgs84:lat"] = pl["location"]["lat"]
          end
          unless pl["location"]["lon"].nil?
            array[i]["wgs84:lon"] = pl["location"]["lon"]
          end
          unless pl["name"].nil?
            array[i]["dcterms:title"] = pl["name"]
          end
          unless pl["gazetteerId"].nil?
            array[i]["@id"] = "https://gazetteer.dainst.org/place/" + pl["gazetteerId"].to_s
          end
          unless pl["relation"].nil?
            array[i]["dcterms:type"] = pl["relation"]
          end
          i += 1
        end
        unless array.nil?
          event.set("[dcterms:spatial]", array)
        end
        '
    }
  }
  # Mapping of the material terms to AAT
  if [facet_material] {
  ruby {
    code => '
      material = event.get("[facet_material][0]")
      materialDesc = event.get("[facet_materialbeschreibung][0]")

      aat = {
        "bronze" => "aat:300010957",
        "terrakotta" => "aat:300010669",
        "marmor" => "aat:300011443",
        "travertin" => "aat:300011329",
        "glas" => "aat:300010797",
        "kalkstein" => "aat:300011286"
      }
      aat2 = {
        "weiÃŸer marmor" => "aat:300011571",
        "grauer marmor" => "aat:300011496",
        "schwarzer marmor" => "aat:300011484",
        "pentelisch" => "aat:300011599",
        "parisch" => "aat:300011594",
        "carrara" => "aat:300011576",
        "carrara" => "aat:300011571",
        "cipollino" => "aat:300011545",
        "marmor thasium" => "aat:300011607",
        "bianco e nero antico" => "aat:300311589",
        "breccia corallina" => "aat:300011453",
        "settebassi" => "aat:300011455",
        "giallo antico" => "aat:300011557",
        "rosso antico" => "aat:300011531",
      }
      i = 0
      array = Array.new
      aat.each {|key, value|
        if material.downcase.include?(key)
          array[i] = {}
          array[i]["@id"] = "#{value}"
          array[i]["dcterms:title"] = "#{key}"
          i += 1
        end
      }
      unless materialDesc.nil?
        aat2.each {|key, value|
          if materialDesc.downcase.include?(key)
            array[i] = {}
            array[i]["@id"] = "#{value}"
            array[i]["dcterms:title"] = "#{key}"
            i += 1
          end
        }
        event.set("[dcterms:medium][dcterms:description]", materialDesc)
      end
      unless array.nil?
        event.set("dcterms:medium", array)
      end
      '
    }
  }
  # json-ld / dcterms mapping for images
  if ([images]) {
  ruby {
    code => "
      images = event.get('images')
      unless images.nil?
        images.each {|i|
          i['@id'] = 'arachne:' + i.delete('imageId').to_s
          i['dcterms:title'] = i.delete('imageSubtitle')
        }
        event.set('dcterms:isReferencedBy', images)
      end
      "
  }
  }

  # json-ld / dcterms mapping for bibliographic references
  if ([references]) {
  ruby {
    code => "
      ref = event.get('references')
      ref.each {|i|
          unless i['zenonId'].nil?
            i['@id'] = 'zenon:' + i.delete('zenonId').to_s
          end
          i['dcterms:bibliographicCitation'] = i.delete('reference')
        }
      event.set('dcterms:references', ref)
      "
  }
  }

  # json-ld / dcterms mapping for arachne connectedEntities
  if ([connectedEntities]) {
  ruby {
    code => "
      relations = event.get('connectedEntities')
      array = Array.new
      i = 0

      relations.each do |entry|
        array[i] = {}
        array[i]['@id'] = 'arachne:' + entry.to_s
        i += 1
      end
      event.set('dcterms:relation', array)
      "
  }
  }

  # dcterms mapping for other attributes
  mutate {
    rename => { "facet_datierungepoche" => "dcterms:temporal" }
    rename => { "facet_literatur" => "dcterms:bibliographicCitation" }
    rename => { "facet_subkategorie_objekt" => "dcterms:type" }
    rename => { "facet_thema" => "dcterms:subject" }
  }

  # remove not needed attributes
  mutate {remove_field => ["message","connectedEntities","path","host","facet_land","images","thumbnailId","imageSize","facet_ort","facet_geo","facet_kategorie","degree","datasetGroup","subtitle","facet_image","ids","boost","lastModified","editorSection","fields","facet_ortsangabe","facet_datierungargument","facet_antikeroemprovinz","externalLinks","facet_fundort","facet_bearbeitungen","suggest","sections","facet_aufbewahrungsort","internalId","catalogIds","catalogPaths","facet_subkategorie_objekt","facet_antikegriechlandschaft","facet_fotonrextern","references","facet_funktion","facet_funktionaleverwendung","facet_materialbeschreibung","facet_material","facet_fundkontext","facet_technik","facet_schmuckspezifizierung","facet_objektgattung","facet_kulturkreis","dates","places","facet_lebensalter","facet_geschlecht","facet_erhaltung"]}
}

output{
	elasticsearch {
	hosts => ["http://localhost:9200"]
	user => "elastic"
	password => "elastic"
	index => "object2"
	document_id => "%{dcterms:identifier}"
	}
}
