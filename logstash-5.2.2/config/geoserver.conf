input {
  http_poller {
    # Reads the geoserver roman provinces layer in geojson format
    urls => {
      test1 => "http://geoserver.dainst.org/geoserver/wfs?srsName=EPSG%3A4326&typename=geonode%3Aromanprovince_ad117&outputFormat=json&version=1.0.0&service=WFS&request=GetFeature"
    }
    request_timeout => 60
    connect_timeout => 15
    interval => 30000
    codec => "json"
  }
}

  filter {
    # splits the featurecollection into each feature
    split {field => "features"}
    # extracts and maps needed attributes to dcterms
    mutate {
      add_field => {"@context" => "http://localhost:9200/place/context/1/_source"}
      add_field => {"[dcterms:type][@id]" => "http://vocab.getty.edu/aat/300387096"}
      add_field => {"[dcterms:type][dcterms:title]" => "province"}
      rename => { "[features][properties][identifier]" => "@id" }
      rename => { "[features][properties][title]" => "dcterms:title" }
      rename => { "[features][properties][descriptio]" => "dcterms:description" }
      rename => { "[features][geometry]" => "geometry" }
    }
    # extracts pleiades id out of the uri
    grok {
      match => { "@id" => "http://pleiades.stoa.org/places/%{NUMBER:identifier}" }
    }
    mutate {
      # transforms geojson geometry type to lowercase to match elasticsearch naming
      lowercase => ["[geometry][type]]"]
      # type declaration for elasticsearch type
      replace => { "type" => "pleiades" }
      rename => { "identifier" => "dcterms:identifier" }
    }
    # removes all not needed geojson fields
    mutate {remove_field => ["totalFeatures","crs","features"]}
}

output{
	elasticsearch {
	   hosts => ["http://localhost:9200"]
	   user => "elastic"
	   password => "elastic"
	   index => "geoserver"
	   document_id => "%{dcterms:identifier}"
	}
}
