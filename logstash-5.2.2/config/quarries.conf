input{
	file{
		path =>"/Users/phg/Documents/Development/sculpturesLOD/logstash-5.2.2/files/quarries.csv"
		start_position =>"beginning"
		sincedb_path => "/dev/null"
		type => "quarry"
	}
}

filter{
	csv{
		columns => ["dc:title","lat","lon","Location","Country","Province","dc:description","AAT","dcterms:bibliographicCitation"]
		separator => "	"
	}

	mutate {add_field => {"dc:identifier" => "%{dc:title}"}}
	mutate {gsub => ["dc:identifier", " ", "_"] lowercase => ["dc:identifier"]}
	mutate {add_field => {"@id" => "http://oxrep.classics.ox.ac.uk/databases/sites/%{Country}/%{dc:identifier}_quarry/"}}
	mutate {
		convert => ["lat","float"]
		convert => ["lon","float"]
		add_field => {"[location][lat]" => "%{lat}"}
		add_field => {"[location][lon]" => "%{lon}"}
		add_field => {"[dcterms:spatial][dcterms:isPartOf]" => "%{Country}"}
		add_field => {"[dcterms:spatial][wgs84:lat]" => "%{lat}"}
		add_field => {"[dcterms:spatial][wgs84:lon]" => "%{lon}"}
		add_field => {"[dcterms:spatial][dc:description]" => "%{Location}"}
	}
	if [AAT] {
		mutate {add_field => {"[dc:format][@id]" => "%{AAT}"}}
	}

	ruby {
			code => '
				material = event.get("[Material]")
				case material
				when (/(limestone)/)
				event.set("[dc:medium][@id]", "aat:limestone")
				event.set("[dc:medium][dc:title]", "limestone")
				when (/(marble)/)
				event.set("[dc:medium][@id]", "aat:marble")
				event.set("[dc:medium][dc:title]", "marble")
				when (/(white marble)/)
				event.set("[dc:medium][@id]", "aat:whiteMarble")
				event.set("[dc:medium][dc:title]", "white marble")
				when (/(sandstone)/)
				event.set("[dc:medium][@id]", "aat:sandstone")
				event.set("[dc:medium][dc:title]", "sandstone")
				end
				'
		}
	ruby { init => '
					require "net/http"
					require "json"
					require "open-uri"
					require "uri"'
				code => '
					title = event.get("[dc:title]")
					url = "https://gazetteer.dainst.org/search.json?q=" + title + "&sort=prefName.title.sort&offset=0&limit=1"
					uri = URI.encode(url)
					res = open(uri).read
					json = JSON.parse(res)
					event.set("[dcterms:spatial][@id]", json["result"][0]["@id"])
				'
			}

	mutate {remove_field => ["message","path","host","Material","AAT","lat","lon","Country","Province","Location"]}
	if [dc:title] == "Site" {drop {}}
}

output{
  stdout { codec => json }
	elasticsearch {
	hosts => ["http://localhost:9200"]
	user => "elastic"
	password => "elastic"
	index => "place"
	document_id => "%{dc:identifier}"
	}
}
