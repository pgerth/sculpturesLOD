# Import of the csv file
input{
  stdin {}

}
# Data conversions
filter{
	# Mapping of the csv colums to dcterms
	# Temporary attributes are not directly mapped to dcterms
	csv{
		columns => ["id","FundNr","Projekt","Kurzbeschr","kulturkreis","KlassAll","KlassSpez","Kampagne","Breite","Hoehe","Tiefe","Gewicht","Material","MaterialBeschr","BauwerkTitel","BauwerkBeschr","Foto"]
		separator => "	"
	}
  # basic JSON-LD structure: @id, @context
  mutate {
    add_field => {"@context" => "http://localhost:9200/object/context/1/_source"}
    add_field => {"@id" => "http://idaifield.dainst.org/chimtou/%{id}"}
  }
  # dcterms mapping
  if [KlassAll] {
    mutate { add_field => {"dcterms:type" => "%{KlassAll}"} }
  }
  if [KlassSpez] {
    mutate { add_field => {"dcterms:description" => "%{KlassSpez}"} }
  }
  if [Projekt] {
    mutate { add_field => {"dcterms:identifier" => "%{Projekt} %{Kampagne} %{FundNr}"} }
  }
  if [Kurzbeschr] {
    mutate { add_field => {"dcterms:title" => "%{Kurzbeschr}"} }
  }
  # dcterms mapping of related datasets
  if [BauwerkTitel] {
    mutate {
      add_field => {"[dcterms:partOf][dcterms:title]" => "%{BauwerkTitel}"}
      add_field => {"[dcterms:partOf][dcterms:type]" => "Bauwerk"}
    }
    if [BauwerkBeschr] {
      mutate {add_field => {"[dcterms:partOf][dcterms:type]" => "%{BauwerkBeschr}"}}
    }
  }
  if [Foto] {
    mutate {
      add_field => {"[dcterms:isReferencedBy]" => "%{Foto}"}
    }
  }

  if [kulturkreis] {
    mutate {
      add_field => {"[dcterms:temporal]" => "rÃ¶misch"}
    }
  }
  # Mapping of the material terms to AAT
  if [Material] {
  ruby {
    code => '
      material = event.get("[Material]")
      materialDesc = event.get("[MaterialBeschr]")

      aat = {
        "bronze" => ["http://vocab.getty.edu/aat/300010957","bronze"],
        "terrakotta" => ["http://vocab.getty.edu/aat/300010669","terracotta"],
        "marmor" => ["http://vocab.getty.edu/aat/300011443","marble"],
        "travertin" => ["http://vocab.getty.edu/aat/300011329","travertine"],
        "glas" => ["http://vocab.getty.edu/aat/300010797","glass"],
        "kalkstein" => ["http://vocab.getty.edu/aat/300011286","limestone"],
        "Marmor (wei" => ["http://vocab.getty.edu/aat/300011571","white marble"]
      }
      aat2 = {
        "schwarzer marmor" => ["http://vocab.getty.edu/aat/300011484","black marble"],
        "pentelisch" => ["http://vocab.getty.edu/aat/300011599","Pentelic marble"],
        "parisch" => ["http://vocab.getty.edu/aat/300011594","Parian marble"],
        "carrara" => ["http://vocab.getty.edu/aat/300011576","Carrara marble"],
        "cipollino" => ["http://vocab.getty.edu/aat/300011545","cipollino"],
        "marmor thasium" => ["http://vocab.getty.edu/aat/300011607",],
        "bianco e nero antico" => ["http://vocab.getty.edu/aat/300311589","tasio"],
        "breccia corallina" => ["http://vocab.getty.edu/aat/300011453","breccia corallina"],
        "settebassi" => ["http://vocab.getty.edu/aat/300011455","breccia di Settebasi"],
        "giallo" => ["http://vocab.getty.edu/aat/300011557","giallo antico"],
        "rosso antico" => ["http://vocab.getty.edu/aat/300011531","rosso antico"]
      }
      i = 0
      array = Array.new
      aat.each {|key, value|
        if material.downcase.include?(key)
          array[i] = {}
          array[i]["@id"] = "#{value[0]}"
          array[i]["dcterms:title"] = "#{value[1]}"
          i += 1
        end
      }
      unless materialDesc.nil?
        aat2.each {|key, value|
          if materialDesc.downcase.include?(key)
            array[i] = {}
            array[i]["@id"] = "#{value[0]}"
            array[i]["dcterms:title"] = "#{value[1]}"
            i += 1
          end
        }
        event.set("[dcterms:medium][dcterms:description]", materialDesc)
      end
      unless array.empty?
        event.set("dcterms:medium", array)
      end
      '
    }
  }

  # concat all measurements into one text field "dcterms:format"
  ruby {
    code => '
      measurements = [["Breite", event.get("[Breite]")], ["HÃ¶he", event.get("[Hoehe]")], ["Tiefe", event.get("[Tiefe]")], ["Gewicht", event.get("[Gewicht]")]]

      array = Array.new
      i = 0
      for item in measurements
        unless item[1].nil?
          array[i] = "#{item[0]}: #{item[1]}cm"
          i += 1
        end
      end
      string = array.join("; ")
      unless string.empty?
        event.set("[dcterms:format]", string)
      end
      '
  }


  # remove not needed attributes
  mutate {
    remove_field => ["message","path","host","KlassAll","KlassSpez","Projekt","Kampagne","FundNr","BauwerkTitel","BauwerkBeschr","Foto","kulturkreis","Material","MaterialBeschr","Breite","Hoehe","Tiefe","Gewicht"]
  }
}
# Injection of the data into the elasticsearch index
output{
	stdout { codec => rubydebug }
	elasticsearch {
		hosts => ["http://localhost:9200"]
		user => "elastic"
		password => "elastic"
		index => "idaifield"
		document_id => "%{id}"
	}
}
