input {
  http_poller {
    # Reads the geoserver roman provinces layer in geojson format
    urls => {
      test1 => "http://geoserver.dainst.org/geoserver/wfs?srsName=EPSG%3A4326&typename=geonode%3Aba_roads&outputFormat=json&version=1.0.0&service=WFS&request=GetFeature"
    }
    request_timeout => 60
    connect_timeout => 15
    interval => 30000
    codec => "json"
  }
}

filter {
    # splits the featurecollection into each feature
    split {field => "features"}
    # extracts and maps needed attributes to dcterms
    mutate {
      add_field => {"@context" => "http://localhost:9200/place/context/1/_source"}
      rename => { "[features][id]" => "dcterms:identifier" }
      rename => { "[features][properties][Source]" => "dcterms:references" }
      rename => { "[features][geometry]" => "geometry" }
    }
    if ([features][properties][Major_or_M] == 1) {
      mutate {
        add_field => {"[dcterms:type][@id]" => "http://vocab.getty.edu/aat/300008283"}
        add_field => {"[dcterms:type][dcterms:title]" => "primary roads"}
      }
    }
    else {
      mutate {
        add_field => {"[dcterms:type][@id]" => "http://vocab.getty.edu/aat/300008287"}
        add_field => {"[dcterms:type][dcterms:title]" => "secondary roads"}
      }
    }
    mutate {
      add_field => {"@id" => "http://geoserver.dainst.org/layers/geonode:ba_roads/%{dcterms:identifier}"}
      # transforms geojson geometry type to lowercase to match elasticsearch naming
      lowercase => ["[geometry][type]]"]
      # type declaration for elasticsearch type
    }
    # removes all not needed geojson fields
    mutate {remove_field => ["totalFeatures","crs","features","type"]}
}

output{
	elasticsearch {
	   hosts => ["http://localhost:9200"]
	   user => "elastic"
	   password => "elastic"
	   index => "shape"
	   document_id => "%{dcterms:identifier}"
     document_type => "road"
	}
}
