# Import of the csv file
input{
	file{
		path =>"/Users/phg/Documents/Development/sculpturesLOD/logstash/files/quarries.csv"
		start_position =>"beginning"
		sincedb_path => "/dev/null"
		type => "quarry"
	}
}
# Data conversions
filter{
	# Mapping of the csv colums to dcterms
	# Temporary attributes are not directly mapped to dcterms
	csv{
		columns => ["dcterms:title","lat","lon","Location","Country","Province","dcterms:description","dcterms:bibliographicCitation"]
		separator => "	"
	}
	# Add @context for json-ld
	mutate {add_field => {"@context" => "http://localhost:9200/place/context/1/_source"}}
	# dcterms Mapping and refinement of the temporary attributes
	mutate {add_field => {"dcterms:identifier" => "%{dcterms:title}"}}
	mutate {gsub => ["dcterms:identifier", " ", "_"] lowercase => ["dcterms:identifier"]}
	mutate {add_field => {"@id" => "http://oxrep.classics.ox.ac.uk/databases/sites/%{Country}/%{dcterms:identifier}_quarry/"}}
	mutate {
		convert => ["lat","float"]
		convert => ["lon","float"]
		add_field => {"[location][lat]" => "%{lat}"}
		add_field => {"[location][lon]" => "%{lon}"}
		add_field => {"[geometry][coordinates]" => "%{lon},%{lat}"}
		add_field => {"[geometry][type]" => "point"}
		add_field => {"[dcterms:spatial][dcterms:isPartOf]" => "%{Country}"}
		add_field => {"[dcterms:spatial][wgs84:lat]" => "%{lat}"}
		add_field => {"[dcterms:spatial][wgs84:lon]" => "%{lon}"}
		add_field => {"[dcterms:spatial][dcterms:description]" => "%{Location}"}
		add_field => {"[dcterms:type][@id]" => "http://vocab.getty.edu/aat/300000402"}
		add_field => {"[dcterms:type][dcterms:title]" => "quarry"}
	}
	mutate {split => { "[geometry][coordinates]" => "," }}
	mutate {convert => {"[geometry][coordinates]" => "float"}}
	# Analysing the material free text description for material terms and
	# Mapping of the material terms to AAT
	ruby {
		code => '
			material = event.get("[dcterms:description]")

			aat = {
				"limestone" => "http://vocab.getty.edu/aat/300011286",
				"sandstone" => "http://vocab.getty.edu/aat/300011376",
				"alabaster" => "http://vocab.getty.edu/aat/300011101",
				"granite" => "http://vocab.getty.edu/aat/300011183",
				"basalt" => "http://vocab.getty.edu/aat/300011222",
				"andesite" => "http://vocab.getty.edu/aat/300011213",
				"schist" => "http://vocab.getty.edu/aat/300011626",
				"tuff" => "http://vocab.getty.edu/aat/300011264",
				"gypsum" => "http://vocab.getty.edu/aat/300011099",
				"porphyry" => "http://vocab.getty.edu/aat/300011232",
				"quartzite" => "http://vocab.getty.edu/aat/300011623",
				"puddingstone" => "http://vocab.getty.edu/aat/300011431",
				"marble" => "http://vocab.getty.edu/aat/300011443",
				"white marble" => "http://vocab.getty.edu/aat/300011571",
				"grey marble" => "http://vocab.getty.edu/aat/300011496",
				"black marble" => "http://vocab.getty.edu/aat/300011484",
			 	"pentelic" => "http://vocab.getty.edu/aat/300011599",
				"travertine" => "http://vocab.getty.edu/aat/300011329",
				"cipollino" => "http://vocab.getty.edu/aat/300011545",
				"paros" => "http://vocab.getty.edu/aat/300011594",
				"marble breccia" => "http://vocab.getty.edu/aat/300011451",
				"breccia marble" => "http://vocab.getty.edu/aat/300011451",
				"marmor thasium" => "http://vocab.getty.edu/aat/300011607",
				"bianco e nero antico" => "http://vocab.getty.edu/aat/300311589",
				"breccia corallina" => "http://vocab.getty.edu/aat/300011453",
				"settebassi" => "http://vocab.getty.edu/aat/300011455",
				"giallo antico" => "http://vocab.getty.edu/aat/300011557",
				"rosso antico" => "http://vocab.getty.edu/aat/300011531",
			}
			i = 0
			array = Array.new
			aat.each {|key, value|
				if material.downcase.include?(key)
					array[i] = {}
					array[i]["@id"] = "#{value}"
					array[i]["dcterms:title"] = "#{key}"
					i += 1
				end
			}
			unless array.nil?
				event.set("[dcterms:medium]", array)
			end
			'
		}
	# Mapping of mentioned place names to iDAI.gazetteer
	ruby {
		init => '
			require "net/http"
			require "json"
			require "open-uri"
			require "uri"'
		code => '
			title = event.get("[dcterms:title]")
			url = "https://gazetteer.dainst.org/search.json?q=" + title + "&sort=prefName.title.sort&offset=0&limit=1"
			uri = URI.encode(url)
			res = open(uri).read
			json = JSON.parse(res)
			unless json["result"][0].nil?
				event.set("[dcterms:spatial][@id]", json["result"][0]["@id"])
			end
			'
		}
	# Romoval of not needed attributes and headline
	mutate {
		remove_field => ["message","path","host","Material","lat","lon","Country","Province","Location","tags"]}
	if [dcterms:title] == "Site" {drop {}}
}
# Injection of the data into the elasticsearch index
output{
  stdout { codec => json }
	elasticsearch {
	hosts => ["http://localhost:9200"]
	user => "elastic"
	password => "elastic"
	index => "place2"
	document_id => "%{dcterms:identifier}"
	}
}
